<?php

namespace App\Http\Controllers;

use App\Models\Account;
use App\Models\JournalVoucher;
use App\Models\Log;
use App\Models\Supplier;
use App\Models\Tax;
use App\Models\Transaction;
use App\Models\VOC;
use App\Models\VOCItem;
use Illuminate\Http\Request;

class VOCController extends Controller
{
    public function __construct()
    {
        $this->middleware('permission:vocs.read')->only('index');
        $this->middleware('permission:vocs.create')->only(['new', 'create']);
        $this->middleware('permission:vocs.update')->only(['edit', 'update']);
        $this->middleware('permission:vocs.delete')->only('destroy');
        $this->middleware('permission:vocs.export')->only('export');
    }

    public function index()
    {
        $vocs = VOC::select('id', 'voc_number', 'supplier_id', 'supplier_invoice', 'date', 'description', 'journal_voucher_id')->filter()->orderBy('id', 'desc')->paginate(25);
        $suppliers = Supplier::select('id', 'name')->get();
        $data = compact('vocs', 'suppliers');

        return view('vocs.index', $data);
    }

    public function new()
    {
        $suppliers = Supplier::select('id', 'name', 'tax_id')->get();
        $accounts = Account::select('id', 'account_number', 'account_description')->get();
        $taxes = Tax::select('id', 'name', 'rate')->get();
        $data = compact('suppliers', 'accounts', 'taxes');

        return view('vocs.new', $data);
    }

    public function create(Request $request)
    {
        $request->validate([
            'supplier_id' => 'required|exists:suppliers,id',
            'supplier_invoice' => 'required|string|max:255|unique:v_o_c_s',
            'tax_id' => 'required|exists:taxes,id',
            'currency_id' => 'required|exists:currencies,id',
            'foreign_currency_id' => 'required|exists:currencies,id',
            'rate' => 'required|numeric|min:0',
            'date' => 'required|date',
            'description' => 'required',
            'account_id.*' => 'required|exists:accounts,id',
            'amount.*' => 'required|numeric',
        ]);
        $number = VOC::generate_number();

        // Create automatic JV
        $jv = JournalVoucher::create([
            'user_id' => auth()->user()->id,
            'currency_id' => $request->input('currency_id'),
            'foreign_currency_id' => $request->input('foreign_currency_id'),
            'rate' => $request->input('rate'),
            'date' => $request->input('date'),
            'description' => 'VOC Transaction ' . $number . ', automatically generated by system...',
            'status' => 'unposted',
            'source' => 'system',
            'batch' => 'S',
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        // Create VOC transaction
        $voc = VOC::create([
            'journal_voucher_id' => $jv->id,
            'voc_number' => $number,
            'supplier_id' => $request->input('supplier_id'),
            'supplier_invoice' => $request->input('supplier_invoice'),
            'tax_id' => $request->input('tax_id'),
            'currency_id' => $request->input('currency_id'),
            'foreign_currency_id' => $request->input('foreign_currency_id'),
            'rate' => $request->input('rate'),
            'date' => $request->input('date'),
            'description' => $request->input('description'),
            'type' => 'VOC Transaction',
        ]);

        $total = 0;
        $total_tax = 0;
        $rate = $request->input('rate') ?? 0;
        $tax_rate = Tax::find($request->input('tax_id'))->rate / 100;

        // Create VOC items and get total
        foreach ($request->input('account_id') as $key => $accountId) {
            $amount = $request->input('amount')[$key];
            $totalAmount = $request->input('amount')[$key] + ($request->input('amount')[$key] * $tax_rate);

            VOCItem::create([
                'voc_id' => $voc->id,
                'account_id' => $accountId,
                'amount' => $amount,
                'tax' => $amount * $tax_rate,
                'total' => $totalAmount,
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $total += $amount;
            $total_tax += ($amount * $tax_rate);

            // Account Debit transaction
            Transaction::create([
                'user_id' => auth()->user()->id,
                'journal_voucher_id' => $jv->id,
                'account_id' => $accountId,
                'currency_id' => $voc->currency_id,
                'debit' => $amount,
                'credit' => 0,
                'balance' => $amount,
                'foreign_currency_id' => $voc->foreign_currency_id,
                'rate' => $rate,
                'foreign_debit' => ($amount * $rate),
                'foreign_credit' => 0,
                'foreign_balance' => ($amount * $rate),
            ]);
        }

        // Supplier Credit transaction
        $supplier = Supplier::find($request->input('supplier_id'));
        Transaction::create([
            'user_id' => auth()->user()->id,
            'journal_voucher_id' => $jv->id,
            'account_id' => $supplier->payable_account_id,
            'supplier_id' => $supplier->id,
            'currency_id' => $voc->currency_id,
            'debit' => 0,
            'credit' => $total + $total_tax,
            'balance' => 0 - ($total + $total_tax),
            'foreign_currency_id' => $voc->foreign_currency_id,
            'rate' => $rate,
            'foreign_debit' => 0,
            'foreign_credit' => ($total + $total_tax) * $rate,
            'foreign_balance' => 0 - (($total + $total_tax) * $rate),
        ]);

        // Tax transaction
        $tax = Tax::find($request->input('tax_id'));
        Transaction::create([
            'user_id' => auth()->user()->id,
            'journal_voucher_id' => $jv->id,
            'account_id' => $tax->account_id,
            'currency_id' => $voc->currency_id,
            'debit' => $total_tax,
            'credit' => 0,
            'balance' => $total_tax,
            'foreign_currency_id' => $voc->foreign_currency_id,
            'rate' => $rate,
            'foreign_debit' => $total_tax * $rate,
            'foreign_credit' => 0,
            'foreign_balance' => $total_tax * $rate,
        ]);

        $text = ucwords(auth()->user()->name) . " created new VOC : " . $voc->voc_number . ", datetime: " . now();
        Log::create(['text' => $text]);

        return redirect()->route('voc')->with('success', 'VOC created successfully!');
    }

    public function edit(VOC $voc)
    {
        if ($voc->can_edit()) {
            $accounts = Account::select('id', 'account_number', 'account_description')->get();
            $taxes = Tax::select('id', 'name', 'rate')->get();

            $total = 0;
            foreach ($voc->voc_items as $item) {
                $total += $item->total;
            }

            $data = compact('voc', 'accounts', 'taxes', 'total');
            return view('vocs.edit', $data);
        } else {
            return redirect()->back()->with('Unable to edit...');
        }
    }

    public function update(VOC $voc, Request $request)
    {
        if ($voc->can_edit()) {
            $request->validate([
                'supplier_invoice' => 'required|string|max:255',
                'tax_id' => 'required|exists:taxes,id',
                'currency_id' => 'required|exists:currencies,id',
                'foreign_currency_id' => 'required|exists:currencies,id',
                'rate' => 'required|numeric|min:0',
                'date' => 'required|date',
                'description' => 'required',
            ]);

            $jv = $voc->journal_voucher;

            $voc->update([
                'date' => $request->date,
                'supplier_invoice' => $request->supplier_invoice,
                'tax_id' => $request->tax_id,
                'currency_id' => $request->currency_id,
                'foreign_currency_id' => $request->foreign_currency_id,
                'rate' => $request->rate,
                'type' => 'VOC Transaction',
                'description' => $request->description,
            ]);

            $total = 0;
            $total_tax = 0;
            $rate = $request->input('rate') ?? 0;
            $tax_rate = Tax::find($request->input('tax_id'))->rate / 100;

            if ($request->input('account_id')[0] != null) {
                // Create VOC items and get total
                foreach ($request->input('account_id') as $key => $accountId) {
                    $amount = $request->input('amount')[$key];
                    $totalAmount = $request->input('amount')[$key] + ($request->input('amount')[$key] * $tax_rate);

                    VOCItem::create([
                        'voc_id' => $voc->id,
                        'account_id' => $accountId,
                        'amount' => $amount,
                        'tax' => $amount * $tax_rate,
                        'total' => $totalAmount,
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    $total += $amount;
                    $total_tax += ($amount * $tax_rate);

                    // Account Debit transaction
                    Transaction::create([
                        'user_id' => auth()->user()->id,
                        'journal_voucher_id' => $jv->id,
                        'account_id' => $accountId,
                        'currency_id' => $voc->currency_id,
                        'debit' => $amount,
                        'credit' => 0,
                        'balance' => $amount,
                        'foreign_currency_id' => $voc->foreign_currency_id,
                        'rate' => $rate,
                        'foreign_debit' => ($amount * $rate),
                        'foreign_credit' => 0,
                        'foreign_balance' => ($amount * $rate),
                    ]);
                }
            }

            // Supplier Credit transaction
            $supplier = $voc->supplier;
            if (($total + $total_tax) != 0) {
                Transaction::create([
                    'user_id' => auth()->user()->id,
                    'journal_voucher_id' => $jv->id,
                    'account_id' => $supplier->payable_account_id,
                    'supplier_id' => $supplier->id,
                    'currency_id' => $voc->currency_id,
                    'debit' => 0,
                    'credit' => $total + $total_tax,
                    'balance' => 0 - ($total + $total_tax),
                    'foreign_currency_id' => $voc->foreign_currency_id,
                    'rate' => $rate,
                    'foreign_debit' => 0,
                    'foreign_credit' => ($total + $total_tax) * $rate,
                    'foreign_balance' => 0 - (($total + $total_tax) * $rate),
                ]);
            }

            // Tax transaction
            $tax = Tax::find($request->input('tax_id'));
            if ($total_tax != 0) {
                Transaction::create([
                    'user_id' => auth()->user()->id,
                    'journal_voucher_id' => $jv->id,
                    'account_id' => $tax->account_id,
                    'currency_id' => $voc->currency_id,
                    'debit' => $total_tax,
                    'credit' => 0,
                    'balance' => $total_tax,
                    'foreign_currency_id' => $voc->foreign_currency_id,
                    'rate' => $rate,
                    'foreign_debit' => $total_tax * $rate,
                    'foreign_credit' => 0,
                    'foreign_balance' => $total_tax * $rate,
                ]);
            }

            $text = ucwords(auth()->user()->name) . ' updated VOC ' . $voc->voc_number . ", datetime :   " . now();
            Log::create(['text' => $text]);

            return redirect()->back()->with('warning', 'VOC updated successfully!');
        } else {
            return redirect()->back()->with('Unable to edit...');
        }
    }

    public function show(VOC $voc)
    {
        $total = 0;
        $total_foreign = 0;

        foreach ($voc->voc_items as $item) {
            $total += $item->total;
        }
        $total_foreign = $total * $voc->rate;

        $data = compact('voc', 'total', 'total_foreign');
        return view('vocs.show', $data);
    }

    public function Return(VOC $voc)
    {
        $vocs = VOC::select('id', 'voc_number')->where('type', 'VOC Transaction')->get();
        return view('vocs.return', compact('voc', 'vocs'));
    }

    public function ReturnSave(Request $request)
    {
        $request->validate([
            'voc_id' => 'required',
            'items' => 'required|array',
        ]);

        $old_voc = VOC::find($request->input('voc_id'));
        $return_number = VOC::generate_return_number();

        // Create automatic JV
        $jv = JournalVoucher::create([
            'user_id' => auth()->user()->id,
            'currency_id' => $old_voc->currency_id,
            'foreign_currency_id' => $old_voc->foreign_currency_id,
            'rate' => $old_voc->rate,
            'date' => date('Y-m-d'),
            'description' => 'Return VOC Transaction ' . $old_voc->voc_number . ', automatically generated by system...',
            'status' => 'unposted',
            'source' => 'system',
            'batch' => 'S',
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        // Create VOC transaction
        $voc = VOC::create([
            'journal_voucher_id' => $jv->id,
            'voc_number' => $return_number,
            'supplier_id' => $old_voc->supplier_id,
            'supplier_invoice' => $old_voc->supplier_invoice,
            'tax_id' => $old_voc->tax_id,
            'currency_id' => $old_voc->currency_id,
            'foreign_currency_id' => $old_voc->foreign_currency_id,
            'rate' => $old_voc->rate,
            'date' => date('Y-m-d'),
            'description' => $old_voc->description,
            'type' => 'return',
        ]);

        $total = 0;
        $total_tax = 0;
        $rate = $old_voc->rate ?? 0;
        $tax_rate = $old_voc->tax->rate / 100;

        // Create VOC items and get total
        foreach ($request->items as $index => $item) {
            if (isset($item['id'])) {
                $old_account = VOCItem::find($item['id'])->account;
                $amount = $item['quantity'];
                $totalAmount = $item['quantity'] + ($item['quantity'] * $tax_rate);

                VOCItem::create([
                    'voc_id' => $voc->id,
                    'account_id' => $old_account->id,
                    'amount' => $amount,
                    'tax' => $amount * $tax_rate,
                    'total' => $totalAmount,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);

                $total += $amount;
                $total_tax += ($amount * $tax_rate);

                // Account Debit transaction
                Transaction::create([
                    'user_id' => auth()->user()->id,
                    'journal_voucher_id' => $jv->id,
                    'account_id' => $old_account->id,
                    'currency_id' => $voc->currency_id,
                    'debit' => 0,
                    'credit' => $amount,
                    'balance' => 0 - $amount,
                    'foreign_currency_id' => $voc->foreign_currency_id,
                    'rate' => $rate,
                    'foreign_debit' => 0,
                    'foreign_credit' => ($amount * $rate),
                    'foreign_balance' => 0 - ($amount * $rate),
                ]);
            }
        }

        // Supplier Credit transaction
        Transaction::create([
            'user_id' => auth()->user()->id,
            'journal_voucher_id' => $jv->id,
            'account_id' => $old_voc->supplier->payable_account_id,
            'supplier_id' => $old_voc->supplier_id,
            'currency_id' => $voc->currency_id,
            'debit' => $total + $total_tax,
            'credit' => 0,
            'balance' => ($total + $total_tax),
            'foreign_currency_id' => $voc->foreign_currency_id,
            'rate' => $rate,
            'foreign_debit' => ($total + $total_tax) * $rate,
            'foreign_credit' => 0,
            'foreign_balance' => ($total + $total_tax) * $rate,
        ]);

        // Tax transaction
        $tax = $old_voc->tax;
        Transaction::create([
            'user_id' => auth()->user()->id,
            'journal_voucher_id' => $jv->id,
            'account_id' => $tax->account_id,
            'currency_id' => $voc->currency_id,
            'debit' => 0,
            'credit' => $total_tax,
            'balance' => 0 - $total_tax,
            'foreign_currency_id' => $voc->foreign_currency_id,
            'rate' => $rate,
            'foreign_debit' => 0,
            'foreign_credit' => $total_tax * $rate,
            'foreign_balance' => 0 - ($total_tax * $rate),
        ]);

        Log::create([
            'text' => ucwords(auth()->user()->name) . ' Returned VOC ' . $voc->voc_number . ", datetime :   " . now(),
        ]);

        return redirect()->route('voc')->with('success', 'VOC Returned successfully!');
    }

    public function items(VOC $voc)
    {
        $items = $voc->voc_items;

        $customizedItems = [];
        $index = 0;
        foreach ($items as $item) {
            $customizedItem = [
                'id' => $item->id,
                'name' => $item->account->account_number,
                'quantity' => $item->amount,
            ];
            $customizedItems[] = $customizedItem;
            $index++;
        }


        return response()->json($customizedItems);
    }

    public function destroy(VOC $voc)
    {
        if ($voc->can_delete()) {
            $text = ucwords(auth()->user()->name) . " deleted VOC : " . $voc->voc_number . ", datetime :   " . now();

            Log::create(['text' => $text]);
            $voc->delete();

            return redirect()->back()->with('error', 'VOC deleted successfully!');
        } else {
            return redirect()->back()->with('error', 'Unothorized Access...');
        }
    }
}
